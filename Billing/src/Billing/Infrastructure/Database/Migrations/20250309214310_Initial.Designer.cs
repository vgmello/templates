// <auto-generated />
using System;
using Billing.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Billing.Infrastructure.Database.Migrations
{
    [DbContext(typeof(BillingDbContext))]
    [Migration("20250309214310_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("billing")
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Billing.Cashier.Data.Entities.Cashier", b =>
                {
                    b.Property<Guid>("CashierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("cashier_id");

                    b.Property<DateTime>("CreatedDateUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_utc")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedDateUtc")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date_utc")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("version");

                    b.HasKey("CashierId")
                        .HasName("pk_cashiers");

                    b.ToTable("cashiers", "billing");
                });

            modelBuilder.Entity("Billing.Cashier.Data.Entities.CashierCurrency", b =>
                {
                    b.Property<Guid>("CashierId")
                        .HasColumnType("uuid")
                        .HasColumnName("cashier_id");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("currency_id");

                    b.Property<DateTime>("EffectiveDateUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("effective_date_utc");

                    b.Property<DateTime>("CreatedDateUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_utc")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("CustomCurrencyCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("custom_currency_code");

                    b.HasKey("CashierId", "CurrencyId", "EffectiveDateUtc")
                        .HasName("pk_cashier_currencies");

                    b.ToTable("cashier_currencies", "billing");
                });

            modelBuilder.Entity("Billing.Invoices.Data.Entities.Invoice", b =>
                {
                    b.Property<Guid>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("invoice_id");

                    b.Property<DateTime>("CreatedDateUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_utc")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedDateUtc")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date_utc")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("version");

                    b.HasKey("InvoiceId")
                        .HasName("pk_invoices");

                    b.ToTable("invoices", "billing");
                });

            modelBuilder.Entity("Billing.Cashier.Data.Entities.CashierCurrency", b =>
                {
                    b.HasOne("Billing.Cashier.Data.Entities.Cashier", "Cashier")
                        .WithMany()
                        .HasForeignKey("CashierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cashier_currencies_cashiers_cashier_id");

                    b.Navigation("Cashier");
                });
#pragma warning restore 612, 618
        }
    }
}
