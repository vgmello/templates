services:
  accounting-db:
    image: postgres:17-alpine
    container_name: accounting-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    volumes:
      - accounting_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  aspire-dashboard:
    image: mcr.microsoft.com/dotnet/aspire-dashboard:9.3
    container_name: accounting-aspire-dashboard
    ports:
      - "18120:18080"
      - "18130:18081"
    environment:
      - DOTNET_DASHBOARD_UNSECURED_ALLOW_ANONYMOUS=true
      - ASPNETCORE_ENVIRONMENT=Development
    restart: unless-stopped

  accounting-db-migrations:
    image: liquibase/liquibase:4.32-alpine
    container_name: accounting-db-migrations
    volumes:
      - ./infra/Accounting.Database:/app
    depends_on:
      accounting-db:
        condition: service_healthy
    environment:
      - LIQUIBASE_COMMAND_USERNAME=postgres
      - LIQUIBASE_COMMAND_PASSWORD=postgres
    working_dir: /app
    entrypoint: /bin/sh
    command:
      - -c
      - |
        echo 'Running database migrations...'

        # Step 1: Setup databases
        liquibase update --defaults-file liquibase.setup.properties --url=jdbc:postgresql://accounting-db:5432/postgres

        # Step 2: Service bus schema
        liquibase update --defaults-file liquibase.servicebus.properties --url=jdbc:postgresql://accounting-db:5432/service_bus

        # Step 3: Domain schema
        liquibase update --url=jdbc:postgresql://accounting-db:5432/accounting

        echo 'Database migrations completed successfully!'

  accounting-api:
    build:
      context: .
      dockerfile: ./src/Accounting.Api/Dockerfile
    container_name: accounting-api
    ports:
      - "8121:8080"
      - "8122:8122"
    depends_on:
      accounting-db:
        condition: service_healthy
      accounting-db-migrations:
        condition: service_completed_successfully
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ServiceName=Accounting
      - ConnectionStrings__AccountingDb=Host=accounting-db;Port=5432;Database=accounting;Username=postgres;Password=postgres
      - ConnectionStrings__ServiceBus=Host=accounting-db;Port=5432;Database=service_bus;Username=postgres;Password=postgres
      - Kestrel__Endpoints__Http__Protocols=Http1
      - Kestrel__Endpoints__Http__Url=http://+:8080
      - Kestrel__Endpoints__Grpc__Protocols=Http2
      - Kestrel__Endpoints__Grpc__Url=http://+:8122
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8080/health/internal || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  accounting-backoffice:
    build:
      context: .
      dockerfile: ./src/Accounting.BackOffice/Dockerfile
    container_name: accounting-backoffice
    ports:
      - "8123:8080"
    depends_on:
      accounting-db:
        condition: service_healthy
      accounting-db-migrations:
        condition: service_completed_successfully
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ServiceName=Accounting
      - ConnectionStrings__AccountingDb=Host=accounting-db;Port=5432;Database=accounting;Username=postgres;Password=postgres
      - ConnectionStrings__ServiceBus=Host=accounting-db;Port=5432;Database=service_bus;Username=postgres;Password=postgres
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8080/health/internal || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  accounting-docs:
    build:
      context: .
      dockerfile: ./docs/Dockerfile
    container_name: accounting-docs
    ports:
      - "8139:8080"
    volumes:
      - ./:/app
    command: ["docs/docfx.json", "--serve", "--hostname=*", "--logLevel=error"]
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8080/toc.json || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

volumes:
  accounting_postgres_data: